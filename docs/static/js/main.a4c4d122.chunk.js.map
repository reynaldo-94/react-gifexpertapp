{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAmB9C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAsBO,OACzCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,YCPlBG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGrC,OADAC,QAAQC,IAAIJ,EAAIC,EAAOC,GAEnB,yBAAKG,UAAU,0CACX,yBAAKC,IAAMJ,EAAMK,IAAMN,IACvB,+BAAMA,K,uBCPLO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbR,EAFa,iDAEoCS,UAAWF,GAF/C,+DAGAG,MAAOV,GAHP,cAGbW,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAVvB,kBAcZc,GAdY,4CAAH,sDCGPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACdvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAqBxC,OAXAC,qBAAW,WAEPjB,EAASC,GACJiB,MAAM,SAAAC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAACb,IAEGc,EDjB0BK,CAAanB,GAAjCU,EAHwB,EAG7BJ,KAAaO,EAHgB,EAGhBA,QAErB,OACI,oCACI,wBAAIjB,UAAU,qCAAd,IAAqDI,EAArD,KACEa,GAAW,uBAAGjB,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEPc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIW,IAAMX,EAAIlB,IAELkB,UEfpBY,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,cAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAW9B,OACI,oCACI,4CAEA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ8C,EAAWd,KAAK,SAACR,EAAUuB,GAAX,OACZ,kBAAC,EAAD,CACIH,IAAMpB,EACNA,SAAWA,U,MCpBvCwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.a4c4d122.chunk.js","sourcesContent":["import React, { useState }  from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    // Uso un stado porque necesito saber lo que la persona estÃ¡ escribiendo\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue,  ...cats ] );\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    console.log(id, title, url);\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p> { title }</p>\r\n        </div>\r\n    )\r\n}\r\n","// Esta funcion retorna una Promesa\r\nexport const getGifs = async( category ) => {\r\n    // encodeURI reempplaza los espacios, etc %20, etc\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=EyZ0xkJsyeIeY1rAlEagVprm5ekHuqVo`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // loading: Es una propiedad del state de mi hooks\r\n    const { data:images, loading } = useFetchGifs(category);    \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className=\"card-grid\">            \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            // ... Operador spred\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // EL 2do parametro es un arreglo de dependecia, con eso el UseEffect se dispara solo una vez\r\n    // Solamente quiero que se ejecute la funcion getFigfs cuando el componente es renderizado por 1era vez\r\n    // Si la categoria cambia va a volver ejecutar ese efectos\r\n    // Los efectos no pueden ser async\r\n    useEffect( () => {\r\n        // Aqui ejecuto la peticion http\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category]);\r\n\r\n    return state; // { data:[], loading: true };\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     setCategories(['Hunter Hunter', ...categories]);\r\n\r\n    //     // setCategories( cats => [ ...cats, 'HunterXHunter' ] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/* Le mando la referencia a setCategories */}\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category, i) => (\r\n                        <GifGrid \r\n                            key={ category}\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}